---
swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about\
    \     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\
    \ #swagger](http://swagger.io/irc/).      For this sample, you can use the api\
    \ key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Book Store"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
schemes:
- "https"
- "http"
paths:
  /books:
    get:
      tags:
      - "book"
      summary: "Books available in the inventory"
      description: "List of books available in the inventory"
      operationId: "booksGET"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        required: false
        type: "integer"
        description: "Pagination offset. Default is 0."
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
      responses:
        200:
          description: "A collection of Books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        404:
          description: "Book not found"
    post:
      tags:
      - "book"
      summary: "Add new book"
      description: "Add a new book to the library"
      operationId: "booksPOST"
      consumes:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        200:
          description: "The book has been added to the database"
        400:
          description: "Error adding the object to the db"
    put:
      tags:
      - "book"
      summary: "Update an existing book"
      description: "Updates an existing book with the informations provided"
      operationId: "bookPUT"
      consumes:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        200:
          description: "The book has been updated"
        400:
          description: "Invalid book ID provided"
        404:
          description: "Book ID not found"
    delete:
      tags:
      - "book"
      summary: "Delete an existing book"
      description: "Deletes the book specified in the id"
      operationId: "bookDELETE"
      parameters:
      - name: "bookID"
        in: "query"
        required: true
        type: "integer"
        description: "The id of the book to delete"
      responses:
        200:
          description: "The book has been successfully deleted"
        400:
          description: "The book id provided is invalid"
        404:
          description: "Book id not found"
  /books/{bookId}:
    get:
      tags:
      - "book"
      summary: "Find book by ID"
      description: "Returns a book"
      operationId: "getBookById"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"
    parameters:
    - name: "bookId"
      in: "path"
      required: true
      type: "integer"
      format: "int64"
      description: "ID of book to return"
  /books/findByName:
    get:
      tags:
      - "book"
      summary: "Find books by name"
      description: "Return a list of books"
      operationId: "getBooksByName"
      produces:
      - "application/json"
      parameters:
      - name: "bookName"
        in: "query"
        required: true
        type: "string"
        description: "Name of the book"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        404:
          description: "Book not found"
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for some books"
      operationId: "orderPOST"
      consumes:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          type: "object"
          required:
          - "BookIDs"
          - "OrderID"
          - "UserID"
          properties:
            OrderID:
              type: "integer"
              description: "The id of the order"
            UserID:
              type: "integer"
              description: "The id of the user that placed the order"
            BookIDs:
              type: "array"
              description: "The ids of the books in the order"
              items:
                type: "integer"
          description: "The details for the order"
        x-examples:
          application/json: "{\n  \"OrderID\": 0,\n  \"UserID\"; 0,\n  \"BookIDs\"\
            : [\n  0,1,2\n  ]\n}"
      responses:
        200:
          description: "Order placed"
        400:
          description: "Wrong IDs"
definitions:
  Book:
    type: "object"
    required:
    - "author"
    - "price"
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      author:
        type: "string"
      price:
        $ref: "#/definitions/Amount"
      status:
        type: "string"
        description: "book availability in the inventory"
        enum:
        - "available"
        - "out of stock"
    description: "A book for sale in the store"
    example:
      id: 0
      title: "Il deserto dei tartari"
      author: "Dino Buzzati"
      price:
        value: 10
        currency: "eur"
      status: "available"
  Amount:
    type: "object"
    required:
    - "currency"
    - "value"
    properties:
      value:
        type: "number"
        format: "double"
        minimum: 0.01
        maximum: 1000
      currency:
        $ref: "#/definitions/Currency"
    description: "Price\n"
    example:
      currency: "eur"
      value: 11
  Currency:
    type: "string"
    description: "some description\n"
    example: "eur"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      address:
        type: "string"
      creditcard:
        type: "string"
    description: "A user"
    example:
      id: 1
      name: "Vittorio"
      address: "DEIB"
      creditcard: "xyzabc"
  Order:
    type: "object"
    required:
    - "Books"
    - "OrderID"
    - "User"
    properties:
      OrderID:
        type: "integer"
        description: "The identifier of the order"
      User:
        $ref: "#/definitions/User"
      Books:
        type: "array"
        description: "The list of books ordered"
        items:
          $ref: "#/definitions/Book"
    description: "An order for some books"
    example: "{\n  \"OrderID\": 123456789,\n  \"User\": {\n  \"id\": 1,\n  \"name\"\
      : \"Vittorio\",\n  \"address\": \"DEIB\",\n  \"creditcard\": \"xyzabc\"\n  }\n\
      \  \"Books\": [\n  {\n  \"id\": 0,\n  \"title\": \"Il deserto dei tartari\"\
      ,\n  \"author\": \"Dino Buzzati\",\n  \"price\": {\n    \"value\": 10,\n   \
      \ \"currency\": \"eur\"\n  },\n  \"status\": \"available\"\n},\n{\n  \"id\"\
      : 1,\n  \"title\": \"Il deserto dei tartari\",\n  \"author\": \"Dino Buzzati\"\
      ,\n  \"price\": {\n    \"value\": 10,\n    \"currency\": \"eur\"\n  },\n  \"\
      status\": \"available\"\n}\n  ]\n}"
