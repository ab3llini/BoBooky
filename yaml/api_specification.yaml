---
swagger: "2.0"
info:
  description: "Welcome to the nodejs backend of Booboky!"
  version: "1.0.0"
  title: "Book Store"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/api"
schemes:
- "https"
paths:
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for some books"
      operationId: "orderPOST"
      consumes:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          type: "object"
          required:
          - "BookIDs"
          - "OrderID"
          - "UserID"
          properties:
            OrderID:
              type: "integer"
              description: "The id of the order"
            UserID:
              type: "integer"
              description: "The id of the user that placed the order"
            BookIDs:
              type: "array"
              description: "The ids of the books in the order"
              items:
                type: "integer"
          description: "The details for the order"
        x-examples:
          application/json: "{\n  \"OrderID\": 0,\n  \"UserID\"; 0,\n  \"BookIDs\"\
            : [\n  0,1,2\n  ]\n}"
      responses:
        200:
          description: "Order placed"
        400:
          description: "Wrong IDs"
  /store/order/{id}:
    get:
      tags:
      - "store"
      summary: "Get a single order by id"
      operationId: "orderByIdGET"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Review"
        400:
          description: "Invalid id"
        404:
          description: "id not found"
    delete:
      tags:
      - "store"
      summary: "Delete an existing order"
      operationId: "orderByIdDELETE"
      parameters:
      - name: "userId"
        in: "header"
        required: true
        type: "integer"
        description: "The ID of the user"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid user or order id"
        404:
          description: "order not found"
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: "string"
  /author:
    get:
      tags:
      - "author"
      summary: "List all the authors in the database"
      parameters:
      - name: "offset"
        in: "query"
        required: false
        type: "integer"
        description: "Page offset. Defaults to 0"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        description: "Result limit. Defaults to 20, max 500."
      responses:
        200:
          description: "Returns the list of authors in the specified range."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Author"
        400:
          description: "Unable to fetch all authors"
        404:
          description: "Unable to find the specified resource"
  /author/{id}:
    get:
      tags:
      - "author"
      summary: "Fetch a specific author"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Author"
        400:
          description: "Unable to fetch this author."
        404:
          description: "Unable to find this author."
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: "string"
  /author/{id}/review:
    get:
      tags:
      - "author"
      - "review"
      summary: "Get reviews for a given author"
      operationId: "authorReviewGET"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        400:
          description: "Bad author id"
        404:
          description: "Status 404"
    post:
      tags:
      - "book"
      - "review"
      summary: "Add new review for the given author"
      operationId: "authorReviewPOST"
      consumes:
      - "application/json"
      parameters:
      - name: "userID"
        in: "query"
        required: true
        type: "integer"
        description: "The user that wrote the review"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        200:
          description: "Status 200"
    delete:
      tags:
      - "author"
      - "review"
      summary: "Delete a review from a given user"
      operationId: "authorReviewDELETE"
      parameters:
      - name: "reviewID"
        in: "query"
        required: true
        type: "integer"
        description: "The id of the review to be removed"
      responses:
        200:
          description: "Status 200"
        400:
          description: "invalid review id"
        404:
          description: "Status 404"
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: "string"
  /book:
    get:
      tags:
      - "book"
      summary: "Books available in the inventory"
      description: "List of books available in the inventory"
      operationId: "booksGET"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        required: false
        type: "integer"
        description: "Pagination offset. Default is 0."
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
      responses:
        200:
          description: "A collection of Books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        404:
          description: "Book not found"
    post:
      tags:
      - "book"
      summary: "Add new book"
      description: "Add a new book to the library"
      operationId: "booksPOST"
      consumes:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        200:
          description: "The book has been added to the database"
        400:
          description: "Error adding the object to the db"
    put:
      tags:
      - "book"
      summary: "Update an existing book"
      description: "Updates an existing book with the informations provided"
      operationId: "bookPUT"
      consumes:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        200:
          description: "The book has been updated"
        400:
          description: "Invalid book ID provided"
        404:
          description: "Book ID not found"
    delete:
      tags:
      - "book"
      summary: "Delete an existing book"
      description: "Deletes the book specified in the id"
      operationId: "bookDELETE"
      parameters:
      - name: "bookID"
        in: "query"
        required: true
        type: "integer"
        description: "The id of the book to delete"
      responses:
        200:
          description: "The book has been successfully deleted"
        400:
          description: "The book id provided is invalid"
        404:
          description: "Book id not found"
  /book/{id}:
    get:
      tags:
      - "book"
      summary: "Find book by ID"
      description: "Returns a book"
      operationId: "getBookById"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: "integer"
      format: "int64"
      description: "ID of book to return"
  /book/{id}/related:
    get:
      tags:
      - "book"
      summary: "Get the related books for the given book id"
      operationId: "bookRelatedGET"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        404:
          description: "Status 404"
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: "string"
  /book/{id}/review:
    get:
      tags:
      - "author"
      - "review"
      summary: "Get reviews for a given book"
      operationId: "bookReviewGET"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        400:
          description: "Bad author id"
        404:
          description: "Status 404"
    post:
      tags:
      - "book"
      - "review"
      summary: "Add new review for the given book"
      operationId: "bookReviewPOST"
      consumes:
      - "application/json"
      parameters:
      - name: "userID"
        in: "query"
        required: true
        type: "integer"
        description: "The user that wrote the review"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        200:
          description: "Status 200"
    delete:
      tags:
      - "author"
      - "review"
      summary: "Delete a review from a given user"
      operationId: "bookReviewDELETE"
      parameters:
      - name: "reviewID"
        in: "query"
        required: true
        type: "integer"
        description: "The id of the review to be removed"
      responses:
        200:
          description: "Status 200"
        400:
          description: "invalid review id"
        404:
          description: "Status 404"
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: "string"
  /book/search:
    get:
      tags:
      - "book"
      summary: "Find books by name"
      description: "Return a list of books"
      operationId: "getBooksByName"
      produces:
      - "application/json"
      parameters:
      - name: "query"
        in: "query"
        required: false
        type: "string"
        description: "generic search query for the book"
      - name: "isbn"
        in: "query"
        required: false
        type: "string"
      - name: "genre"
        in: "query"
        required: false
        type: "string"
      - name: "year"
        in: "query"
        required: false
        type: "integer"
      - name: "author"
        in: "query"
        required: false
        type: "string"
      - name: "publisher"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "At least one parameter must be specified"
        404:
          description: "Book not found"
  /user/register:
    post:
      tags:
      - "user"
      summary: "Registration"
      description: "Register into the bookstore"
      operationId: "userRegisterPOST"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "id"
        in: "formData"
        required: false
        type: "integer"
      - name: "name"
        in: "formData"
        required: false
        type: "string"
      - name: "address"
        in: "formData"
        required: false
        type: "string"
      - name: "creditcard"
        in: "formData"
        required: false
        type: "string"
      responses:
        200:
          description: "succesfull registration"
        404:
          description: "unauthorized"
  /user/login:
    post:
      tags:
      - "user"
      summary: "Login"
      description: "Login with a form"
      operationId: "userLoginPOST"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "username"
        in: "formData"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        required: true
        type: "string"
      responses:
        200:
          description: "succesfull login"
        404:
          description: "unauthorized"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out the current user session"
      description: "Logout"
      operationId: "userLogoutGET"
      parameters: []
      responses:
        200:
          description: "Status 200"
  /user/{id}/address:
    get:
      tags:
      - "user"
      - "address"
      summary: "Get the list of addresses for the user"
      operationId: "userAddressGET"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Address"
        404:
          description: "Status 404"
    post:
      tags:
      - "address"
      - "user"
      summary: "Add new address for the user"
      operationId: "userAddressPOST"
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Address"
      responses:
        200:
          description: "Status 200"
        404:
          description: "Status 404"
    put:
      tags:
      - "address"
      - "user"
      summary: "Update an exsisting address"
      operationId: "userAddressPUT"
      consumes:
      - "application/json"
      parameters:
      - name: "addressID"
        in: "query"
        required: true
        type: "integer"
        description: "The identifier for the address to update"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Address"
      responses:
        200:
          description: "Status 200"
        400:
          description: "Invalid address ID - the address to update does not exists"
        404:
          description: "Status 404"
    delete:
      summary: "Delete an existing address for the user"
      operationId: "userAddressDELETE"
      parameters:
      - name: "addressID"
        in: "query"
        required: true
        type: "integer"
        description: "The id of the address to be removed"
      responses:
        200:
          description: "The address has been removed"
        400:
          description: "The address id is invalid"
        404:
          description: "Status 404"
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: "string"
  /user/{id}/whishlist:
    get:
      tags:
      - "user"
      summary: "Get the list of books in the whishlist"
      operationId: "userWhishlistGET"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        404:
          description: "Status 404"
    delete:
      tags:
      - "user"
      summary: "Removes one book from the whishlist"
      operationId: "userWhishlistDELETE"
      parameters:
      - name: "bookID"
        in: "query"
        required: true
        type: "integer"
        description: "The id of the book to be removed from the whishlist"
      responses:
        200:
          description: "Status 200"
        400:
          description: "Invalid book id - the book is not presenti on the whishlist"
        404:
          description: "Status 404"
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: "string"
  /user/{id}/order:
    get:
      tags:
      - "user"
      summary: "Get the orders for a given user"
      operationId: "userOrderGET"
      parameters: []
      responses:
        200:
          description: "Status 200"
        404:
          description: "Status 404"
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: "string"
  /user/{id}/chart:
    get:
      tags:
      - "user"
      summary: "Get the user's current chart"
      operationId: "userChartGET"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Chart"
        404:
          description: "Status 404"
    put:
      tags:
      - "user"
      - "chart"
      summary: "Updates the current chart"
      operationId: "userChartPUT"
      consumes:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          type: "object"
          required:
          - "bookID"
          - "qty"
          properties:
            bookID:
              type: "integer"
            qty:
              type: "integer"
      responses:
        200:
          description: "Status 200"
    delete:
      tags:
      - "book"
      summary: "Delete the current chart"
      operationId: "userChartDELETE"
      parameters: []
      responses:
        200:
          description: "Status 200"
        404:
          description: "Status 404"
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: "string"
definitions:
  Book:
    type: "object"
    required:
    - "author"
    - "price"
    - "publisher"
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      author:
        type: "string"
      price:
        $ref: "#/definitions/Amount"
      image_url:
        type: "array"
        items:
          type: "string"
      genres:
        type: "array"
        items:
          type: "string"
      publisher:
        type: "string"
    description: "A book for sale in the store"
    example: "{\n  id: 0,\n  title: \"Il deserto dei tartari\",\n  author: \"Dino\
      \ Buzzati\",\n  price: {\n    value: 10,\n    currency: \"eur\"\n  },\n  image_url:\
      \ \"https://test.com\"\n}"
  Amount:
    type: "object"
    required:
    - "value"
    properties:
      value:
        type: "number"
        format: "double"
        minimum: 0.01
        maximum: 1000
    description: "Price\n"
    example: "{\n  currency: \"eur\",\n  value: 11\n}"
  User:
    type: "object"
    required:
    - "email"
    - "name"
    - "surname"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      surname:
        type: "string"
      email:
        type: "string"
      birthdate:
        type: "string"
        format: "date"
    description: "A user"
    example: "{\n  id: 1,\n  name: \"Alan\",\n  surname: \"Turing\",\n  email: \"\
      alan.turing@example.com\"\n  birthdate: \"1989-01-01\"\n}"
  Review:
    type: "object"
    required:
    - "author"
    - "book_author"
    - "rating"
    - "timestamp"
    - "title"
    properties:
      id:
        type: "integer"
      author:
        type: "integer"
        description: "ID of the user to which this review refers"
      timestamp:
        type: "string"
        format: "date-time"
      title:
        type: "string"
      body:
        type: "string"
      rating:
        type: "number"
      book_author:
        type: "integer"
        description: "ID of the book (or author) to which this review refers."
    description: "This is a review object."
  Author:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      image_url:
        type: "string"
      description:
        type: "string"
  Address:
    type: "object"
    required:
    - "address_line_1"
    - "cap"
    - "city"
    - "country"
    - "name"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      address_line_1:
        type: "string"
      address_line_2:
        type: "string"
      cap:
        type: "integer"
      city:
        type: "string"
      country:
        type: "string"
    description: "An address -.-"
  Event:
    type: "object"
    required:
    - "description"
    - "location_id"
    - "name"
    - "timestamp"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      description:
        type: "string"
      location_id:
        type: "integer"
        description: "Id for the address"
      timestamp:
        type: "string"
        format: "date-time"
    description: "An event, oc -.-"
  Order:
    type: "object"
    required:
    - "Books"
    - "User"
    - "amount"
    - "timestamp"
    properties:
      OrderID:
        type: "integer"
        description: "The identifier of the order"
      User:
        $ref: "#/definitions/User"
      Books:
        type: "array"
        description: "The list of books ordered"
        items:
          required:
          - "book"
          - "qty"
          type: "object"
          properties:
            book:
              $ref: "#/definitions/Book"
            qty:
              type: "integer"
      amount:
        type: "number"
        description: "Amount to pay for this order"
      timestamp:
        type: "string"
        format: "date-time"
    description: "An order for some books"
    example: "{\n  OrderID: 123456789,\n  User: \n  {\n   id: 1,\n   name: \"Alan\"\
      ,\n   surname: \"Turing\",\n   email: \"alan.turing@example.com\"\n   birthdate:\
      \ \"1989-01-01\"\n}\n  Books: [\n  {\n  id: 0,\n  title: \"Il deserto dei tartari\"\
      ,\n  author: \"Dino Buzzati\",\n  price: {\n    value: 10,\n    currency: \"\
      eur\"\n  }\n\n},\n{\n  id: 1,\n  title: \"Il deserto dei tartari\",\n  author:\
      \ \"Dino Buzzati\",\n  price: {\n    value: 10,\n    currency: \"eur\"\n  }\n\
      }\n  ]\n}"
  Chart:
    type: "object"
    required:
    - "Books"
    - "User"
    - "timestamp"
    - "total_amount"
    properties:
      User:
        $ref: "#/definitions/User"
      Books:
        type: "array"
        description: "The list of books ordered"
        items:
          required:
          - "book"
          - "qty"
          type: "object"
          properties:
            book:
              $ref: "#/definitions/Book"
            qty:
              type: "integer"
      total_amount:
        type: "number"
        description: "Amount to pay for this order"
      timestamp:
        type: "string"
        format: "date-time"
    description: "An order for some books"
    example: "{\n  OrderID: 123456789,\n  User: \n  {\n   id: 1,\n   name: \"Alan\"\
      ,\n   surname: \"Turing\",\n   email: \"alan.turing@example.com\"\n   birthdate:\
      \ \"1989-01-01\"\n}\n  Books: [\n  {\n  id: 0,\n  title: \"Il deserto dei tartari\"\
      ,\n  author: \"Dino Buzzati\",\n  price: {\n    value: 10,\n    currency: \"\
      eur\"\n  }\n\n},\n{\n  id: 1,\n  title: \"Il deserto dei tartari\",\n  author:\
      \ \"Dino Buzzati\",\n  price: {\n    value: 10,\n    currency: \"eur\"\n  }\n\
      }\n  ]\n}"
